using System.IdentityModel.Tokens.Jwt;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;

namespace WebApi.Extensions
{
  public static class JwtExtension
  {
    public static JwtSecurityToken GetJwtSecurityToken(this HttpRequest request)
    {
      JwtSecurityToken oToken = null;
      if (request.Headers.TryGetValue("Authorization", out var value))
      {
        const string pattern = @"Bearer\s+(.*)";
        var r = new Regex(pattern, RegexOptions.IgnoreCase);
        var m = r.Match(value);

        if (m.Groups.Count == 2)
        {
          var token = m.Groups[1].Value;
          oToken = (JwtSecurityToken) new JwtSecurityTokenHandler().ReadToken(token);
        }
      }

      return oToken;
    }
  }

  public class SecurityContextMiddleware
  {
    private readonly RequestDelegate _next;

    public SecurityContextMiddleware(RequestDelegate next)
    {
      _next = next;
    }

    public async Task Invoke(HttpContext context)
    {
      var token = context.Request.GetJwtSecurityToken();

      if (token != null)
      {
        token.Payload.TryGetValue(JwtKey.CUSTOM_SAFEID, out var safeid);
        token.Payload.TryGetValue(JwtKey.COGNITO_USERNAME, out var cname);

        var secContext = context.RequestServices.GetService<IMetadataContext>();

        secContext.Security.UserId = safeid?.ToString();
        secContext.Security.UserName = cname?.ToString();
      }

      await _next(context);
    }
  }
}